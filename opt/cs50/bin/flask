#!/usr/local/bin/python3

import argparse
import sys
import os
import subprocess
import termcolor

DEFAULT_HOST = '0.0.0.0'
DEFAULT_PORT = 8080
EXECUTABLE = '/usr/local/bin/flask'

def main():

    # If $FLASK_APP isn't set, check for application.py (for backwards compatibility), else implicitly default to app.py
    if os.getenv('FLASK_APP') is None:
        if os.path.isfile('./application.py'):
            os.environ['FLASK_APP'] = 'application.py'
        else:
            os.environ['FLASK_APP'] = 'app.py'

    # Enable development mode by default
    os.environ['FLASK_ENV'] = 'development'

    # But not debug mode
    os.environ['FLASK_DEBUG'] = '0'

    # Construct flask command
    args, extra_args = parse_args(sys.argv[1:])
    host = args.host or DEFAULT_HOST
    port = args.port or DEFAULT_PORT
    command = [EXECUTABLE]
    
    if args.run == 'run':
        command.extend(['run', f'--host={host}', f'--port={port}', '--reload'])
        os.system(f'fuser -k {port}/tcp') # Kill any process listing on the specified port
        display_codespace_url(port)

    # Start flask server
    command.extend(extra_args)
    subprocess.call(command)


def parse_args(args):
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument(
        'run',
        nargs='?'
    )
    parser.add_argument(
        '--host',
        nargs='?'
    )
    parser.add_argument(
        '--port',
        nargs='?'
    )
    return parser.parse_known_args(args)


def display_codespace_url(port):
    codespace_name = os.getenv('CODESPACE_NAME')
    if (codespace_name is not None):
        local_address = f'https://{codespace_name}-{port}.githubpreview.dev/'
        msg = f"\nFlask app running on {local_address}\n"
        print(termcolor.colored(msg, 'green'))


if __name__ == '__main__':
    main()