#!/usr/local/bin/python3

import argparse
import logging
import os
import subprocess
import sys
import termcolor


GH_CLASSROOM = 'classroom50'
DIRS_TO_REMOVE = [
    '.git',
    '.vscode',
    '.devcontainer'
]

def main():
    args = parse_args(sys.argv[1:])
    configure_logging(args.verbose)
    assignment = args.assignment
    if args.username is not None:
        assignment += f'-{args.username}'
    
    destination = f'/workspaces/{os.getenv("RepositoryName")}/{assignment}'    
    repo_url = f'git@github.com:{GH_CLASSROOM}/{assignment}.git'

    try:
        if (args.verbose):
            print()
            os.system(f'GIT_SSH_COMMAND="ssh -v" git clone --progress --verbose {repo_url} {destination}')
        else:
            subprocess.check_output(f'git clone {repo_url} {destination}', stderr=subprocess.STDOUT, shell=True)

        remove_dirs(destination)
        message = f'You now have a directory called {assignment}. To change to it, execute `cd` and then execute `cd {assignment}`.'
        print(success(message))

    except subprocess.CalledProcessError as exc:
        error_message = exc.output.decode('utf-8').strip()

        key_words_empty_dir = 'already exists and is not an empty directory'
        key_words_access_right = 'make sure you have the correct access rights'

        if (key_words_empty_dir in error_message):
            logging.debug(exc)
            message = f'Looks like the directory \'{assignment}\' already exists in your file explorer and is not empty!'
            print(warning(message))

        if (key_words_access_right in error_message):
            logging.debug(exc)
            message = f'Unable to get distribution code \'{assignment}\'.\n'\
                f'Please make sure you have followed the steps at cs50.ly/github to set up SSH and the repository name is correct.'
            print(warning(message))
        
    except Exception as e:
        logging.info(e)
        contact_sysadmin()


def parse_args(args):
    parser = argparse.ArgumentParser(
        description=f'A git wrapper for getting {GH_CLASSROOM} assignment distribution code.'
    )
    parser.add_argument(
        '--verbose',
        action='store_true'
    )
    parser.add_argument(
        'assignment',
        metavar='PROBLEM',
        type=str,
        help='the assignment repository (e.g., mario-less)'
    )
    parser.add_argument(
        'username',
        nargs='?',
        metavar='USERNAME',
        const=None,
        type=str,
        help='the github username'
    )
    return parser.parse_args(args)


def remove_dirs(destination):
    for dir in DIRS_TO_REMOVE:
        subprocess.check_call(f'rm -rf {destination}/{dir}', shell=True)


def configure_logging(verbose):
    logging.basicConfig(format='%(message)s', level=logging.DEBUG if verbose else logging.INFO)


def contact_sysadmin():
    message = 'Sorry, something is wrong! get50 ran into an error.\n'\
        'Please let CS50 know by emailing the above to sysadmins@cs50.harvard.edu.'
    print(_error(message))


def success(msg):
    return termcolor.colored(msg, 'green')


def warning(msg):
    return termcolor.colored(msg, 'yellow')


def _error(msg):
    return termcolor.colored(msg, 'red')


if __name__ == '__main__':
    main()